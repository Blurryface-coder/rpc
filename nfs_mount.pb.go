// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: nfs_mount.proto

package nm

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	TargetPath string   `protobuf:"bytes,2,opt,name=targetPath,proto3" json:"targetPath,omitempty"`
	MountOpts  []string `protobuf:"bytes,3,rep,name=mountOpts,proto3" json:"mountOpts,omitempty"`
}

func (x *MountRequest) Reset() {
	*x = MountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nfs_mount_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountRequest) ProtoMessage() {}

func (x *MountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_mount_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountRequest.ProtoReflect.Descriptor instead.
func (*MountRequest) Descriptor() ([]byte, []int) {
	return file_nfs_mount_proto_rawDescGZIP(), []int{0}
}

func (x *MountRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *MountRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

func (x *MountRequest) GetMountOpts() []string {
	if x != nil {
		return x.MountOpts
	}
	return nil
}

type MountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MountResponse) Reset() {
	*x = MountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nfs_mount_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MountResponse) ProtoMessage() {}

func (x *MountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_mount_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MountResponse.ProtoReflect.Descriptor instead.
func (*MountResponse) Descriptor() ([]byte, []int) {
	return file_nfs_mount_proto_rawDescGZIP(), []int{1}
}

type UnmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPath string `protobuf:"bytes,1,opt,name=targetPath,proto3" json:"targetPath,omitempty"`
}

func (x *UnmountRequest) Reset() {
	*x = UnmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nfs_mount_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmountRequest) ProtoMessage() {}

func (x *UnmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_mount_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmountRequest.ProtoReflect.Descriptor instead.
func (*UnmountRequest) Descriptor() ([]byte, []int) {
	return file_nfs_mount_proto_rawDescGZIP(), []int{2}
}

func (x *UnmountRequest) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

type UnmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnmountResponse) Reset() {
	*x = UnmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nfs_mount_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmountResponse) ProtoMessage() {}

func (x *UnmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nfs_mount_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmountResponse.ProtoReflect.Descriptor instead.
func (*UnmountResponse) Descriptor() ([]byte, []int) {
	return file_nfs_mount_proto_rawDescGZIP(), []int{3}
}

var File_nfs_mount_proto protoreflect.FileDescriptor

var file_nfs_mount_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6e, 0x66, 0x73, 0x5f, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x02, 0x6e, 0x6d, 0x22, 0x64, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x0e,
	0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x22, 0x11,
	0x0a, 0x0f, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x32, 0x3b, 0x0a, 0x07, 0x44, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x07,
	0x44, 0x6f, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x6e, 0x6d, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x6d, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x43,
	0x0a, 0x09, 0x44, 0x6f, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x44,
	0x6f, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x2e, 0x6e, 0x6d, 0x2e, 0x55, 0x6e,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6e,
	0x6d, 0x2e, 0x55, 0x6e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nfs_mount_proto_rawDescOnce sync.Once
	file_nfs_mount_proto_rawDescData = file_nfs_mount_proto_rawDesc
)

func file_nfs_mount_proto_rawDescGZIP() []byte {
	file_nfs_mount_proto_rawDescOnce.Do(func() {
		file_nfs_mount_proto_rawDescData = protoimpl.X.CompressGZIP(file_nfs_mount_proto_rawDescData)
	})
	return file_nfs_mount_proto_rawDescData
}

var file_nfs_mount_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_nfs_mount_proto_goTypes = []interface{}{
	(*MountRequest)(nil),    // 0: nm.MountRequest
	(*MountResponse)(nil),   // 1: nm.MountResponse
	(*UnmountRequest)(nil),  // 2: nm.UnmountRequest
	(*UnmountResponse)(nil), // 3: nm.UnmountResponse
}
var file_nfs_mount_proto_depIdxs = []int32{
	0, // 0: nm.DoMount.DoMount:input_type -> nm.MountRequest
	2, // 1: nm.DoUnmount.DoUnmount:input_type -> nm.UnmountRequest
	1, // 2: nm.DoMount.DoMount:output_type -> nm.MountResponse
	3, // 3: nm.DoUnmount.DoUnmount:output_type -> nm.UnmountResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_nfs_mount_proto_init() }
func file_nfs_mount_proto_init() {
	if File_nfs_mount_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nfs_mount_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nfs_mount_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nfs_mount_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nfs_mount_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nfs_mount_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_nfs_mount_proto_goTypes,
		DependencyIndexes: file_nfs_mount_proto_depIdxs,
		MessageInfos:      file_nfs_mount_proto_msgTypes,
	}.Build()
	File_nfs_mount_proto = out.File
	file_nfs_mount_proto_rawDesc = nil
	file_nfs_mount_proto_goTypes = nil
	file_nfs_mount_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DoMountClient is the client API for DoMount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoMountClient interface {
	DoMount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error)
}

type doMountClient struct {
	cc grpc.ClientConnInterface
}

func NewDoMountClient(cc grpc.ClientConnInterface) DoMountClient {
	return &doMountClient{cc}
}

func (c *doMountClient) DoMount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error) {
	out := new(MountResponse)
	err := c.cc.Invoke(ctx, "/nm.DoMount/DoMount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoMountServer is the server API for DoMount service.
type DoMountServer interface {
	DoMount(context.Context, *MountRequest) (*MountResponse, error)
}

// UnimplementedDoMountServer can be embedded to have forward compatible implementations.
type UnimplementedDoMountServer struct {
}

func (*UnimplementedDoMountServer) DoMount(context.Context, *MountRequest) (*MountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoMount not implemented")
}

func RegisterDoMountServer(s *grpc.Server, srv DoMountServer) {
	s.RegisterService(&_DoMount_serviceDesc, srv)
}

func _DoMount_DoMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoMountServer).DoMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nm.DoMount/DoMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoMountServer).DoMount(ctx, req.(*MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoMount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nm.DoMount",
	HandlerType: (*DoMountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoMount",
			Handler:    _DoMount_DoMount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nfs_mount.proto",
}

// DoUnmountClient is the client API for DoUnmount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DoUnmountClient interface {
	DoUnmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*UnmountResponse, error)
}

type doUnmountClient struct {
	cc grpc.ClientConnInterface
}

func NewDoUnmountClient(cc grpc.ClientConnInterface) DoUnmountClient {
	return &doUnmountClient{cc}
}

func (c *doUnmountClient) DoUnmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*UnmountResponse, error) {
	out := new(UnmountResponse)
	err := c.cc.Invoke(ctx, "/nm.DoUnmount/DoUnmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoUnmountServer is the server API for DoUnmount service.
type DoUnmountServer interface {
	DoUnmount(context.Context, *UnmountRequest) (*UnmountResponse, error)
}

// UnimplementedDoUnmountServer can be embedded to have forward compatible implementations.
type UnimplementedDoUnmountServer struct {
}

func (*UnimplementedDoUnmountServer) DoUnmount(context.Context, *UnmountRequest) (*UnmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoUnmount not implemented")
}

func RegisterDoUnmountServer(s *grpc.Server, srv DoUnmountServer) {
	s.RegisterService(&_DoUnmount_serviceDesc, srv)
}

func _DoUnmount_DoUnmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoUnmountServer).DoUnmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nm.DoUnmount/DoUnmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoUnmountServer).DoUnmount(ctx, req.(*UnmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoUnmount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nm.DoUnmount",
	HandlerType: (*DoUnmountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoUnmount",
			Handler:    _DoUnmount_DoUnmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nfs_mount.proto",
}
